const hourly = Date.now(120000);
const now = Date.now();


// Obtem o modelo do roteador
let fabricante = declare("DeviceID.Manufacturer", { value: 1 }).value[0];

// Variável para definir o padrão do pppoe que a empresa usara dentro do preset do roteador
let default_user_pppoe = 'tr069';

//Condicional para roteador ZTE (Testado apenas em roteadores H199A e H198A)
if (fabricante == 'ZTE') {
    let versao = declare("DeviceID.ProductClass", { value: 1 }).value[0];
    if(versao == 'F612'){
      let line_user = declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthUserName", { value: 1 }).value[0];	
        log (line_user)
        if (line_user == "" || line_user == "21202" || line_user == "10" ){
            let maclan = declare("InternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.1.MACAddress", { value: 1 }).value[0];
            configontzte(maclan)
        }
    }else{
    	let ppp = declare("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.2.Username", { value: 1 }).value[0];
    	if (ppp == default_user_pppoe) {
        	let para_ssid24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.SSID";
        	let para_ssid5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.5.SSID";
        	let para_key24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.KeyPassphrase";
        	let para_key5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.5.KeyPassphrase";
        	let para_ppp_user = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.2.Username";
        	let para_ppp_pass = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.2.Password";
        	let maclan = declare("InternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.1.MACAddress", { value: 1 }).value[0];
        	configRoteador(para_ssid24,para_ssid5,para_key24,para_key5,para_ppp_user,para_ppp_pass,maclan)
     	}
    }  
}
//Condicional para roteador TP-LINK (Testado apenas em roteadores ac750 v5, ac1200, AX1800)
else if (fabricante == 'TP-Link') {
    let versao = declare("InternetGatewayDevice.DeviceInfo.HardwareVersion", { value: 1 }).value[0];
    //let versao2 = declare("Device.DeviceInfo.HardwareVersion", { value: 1 }).value[0];
    if (versao == 'EX220 v1.20 00000000'){
    	let ppp = declare("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.5.WANPPPConnection.1.Username", { value: 1 }).value[0];
      	if (ppp == default_user_pppoe) {
            clear("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.5.WANPPPConnection.1.Password", now);
            clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TP_PreSharedKey", now);
            clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.X_TP_PreSharedKey", now)
        	let para_ssid24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.SSID";
        	let para_ssid5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.SSID";
        	let para_key24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TP_PreSharedKey";
        	let para_key5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.X_TP_PreSharedKey";
        	let para_ppp_user = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.5.WANPPPConnection.1.Username";
        	let para_ppp_pass = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.5.WANPPPConnection.1.Password";
        	let maclan = declare("InternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.2.MACAddress", { value: 1 }).value[0];
        	configRoteador(para_ssid24,para_ssid5,para_key24,para_key5,para_ppp_user,para_ppp_pass,maclan)
    	}
    } else if (versao == 'EX141 v1.0 00000000'){
        //declare("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.4.WANPPPConnection.1.X_TP_IPv6Enabled", { value: 1 }, { value: false });
      	//declare("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.4.WANPPPConnection.1.X_TP_IPv6AddressingType", { value: 1 }, { value: "SLAAC" });
      	declare("InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.Channel", { value: 1 }, { value: 36 });
        declare("InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.Channel", { value: 1 }, { value: 1 });
        declare("InternetGatewayDevice.LANDevice.1.WLANConfiguration.2.AutoChannelEnable", { value: 1 }, { value: false });
        declare("InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.AutoChannelEnable", { value: 1 }, { value: false });
    	let ppp = declare("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.4.WANPPPConnection.1.Username", { value: 1 }).value[0];
      	if (ppp == default_user_pppoe) {
            clear("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.4.WANPPPConnection.1.Password", now);
            clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TP_PreSharedKey", now);
            clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.X_TP_PreSharedKey", now)
        	let para_ssid24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.SSID";
        	let para_ssid5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.SSID";
        	let para_key24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TP_PreSharedKey";
        	let para_key5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.X_TP_PreSharedKey";
        	let para_ppp_user = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.4.WANPPPConnection.1.Username";
        	let para_ppp_pass = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.4.WANPPPConnection.1.Password";
        	let maclan = declare("InternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.2.MACAddress", { value: 1 }).value[0];
        	configRoteador(para_ssid24,para_ssid5,para_key24,para_key5,para_ppp_user,para_ppp_pass,maclan)
    	}
    } else if (versao == 'XC220-G3v v2.0 00000000'){
    	let ppp = declare("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.5.WANPPPConnection.1.Username", { value: 1 }).value[0];
      	if (ppp == default_user_pppoe) {
            clear("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.5.WANPPPConnection.1.Password", now);
            clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TP_PreSharedKey", now);
            clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.X_TP_PreSharedKey", now)
        	let para_ssid24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.SSID";
        	let para_ssid5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.SSID";
        	let para_key24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TP_PreSharedKey";
        	let para_key5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.X_TP_PreSharedKey";
        	let para_ppp_user = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.5.WANPPPConnection.1.Username";
        	let para_ppp_pass = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.5.WANPPPConnection.1.Password";
        	let maclan = declare("InternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.1.MACAddress", { value: 1 }).value[0];
        	configRoteador(para_ssid24,para_ssid5,para_key24,para_key5,para_ppp_user,para_ppp_pass,maclan)
    	}
    } 

    else{
    	let ppp = declare("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Username", { value: 1 }).value[0];
    	if (ppp == default_user_pppoe) {
            clear("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Password", now);
        	clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.KeyPassphrase", now);
        	clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.2.KeyPassphrase", now)
        	let para_ssid24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.SSID";
        	let para_ssid5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.2.SSID";
        	let para_key24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TP_PreSharedKey";
        	let para_key5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.2.X_TP_PreSharedKey";
        	let para_ppp_user = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Username";
        	let para_ppp_pass = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Password";
        	let maclan = declare("InternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.1.MACAddress", { value: 1 }).value[0];
        	configRoteador(para_ssid24,para_ssid5,para_key24,para_key5,para_ppp_user,para_ppp_pass,maclan)
    	}
    }
}
//Condicional para roteador Cudy (Testado apenas em roteadores X6 US V2.0)
else if (fabricante == 'Cudy') {
    let ppp = declare("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Username", { value: 1 }).value[0];
    if (ppp == default_user_pppoe) {
        let para_ssid24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.SSID";
        let para_ssid5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.2.SSID";
        let para_key24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_CUDY_Password";
        let para_key5 = "InInternetGatewayDevice.LANDevice.1.WLANConfiguration.2.X_CUDY_Password";
        let para_ppp_user = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Username";
        let para_ppp_pass = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Password";
        let maclan = declare("InternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.1.MACAddress", { value: 1 }).value[0];
        configRoteador(para_ssid24,para_ssid5,para_key24,para_key5,para_ppp_user,para_ppp_pass,maclan)
    }
}
//Condicional para roteador Huawei (Testado apenas em roteadores AX2)
else if (fabricante == "Huawei Technologies Co., Ltd.") {
    let productclass = declare("DeviceID.ProductClass", { value: 1 }).value[0];
    if (productclass == 'EG8120L' || productclass == 'HG8120H' || productclass == 'EG8120L'){
        let line_user = declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthUserName", { value: 1 }).value[0];	
        log (line_user)
        if (line_user == "" || line_user == "21202" || line_user == "10"){
            let maclan = declare("InternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.1.MACAddress", { value: 1 }).value[0];
            configont(maclan)
        }
        
    }else{
    let ppp = declare("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Username", { value: 1 }).value[0];
    if (ppp == default_user_pppoe) {
        let para_ssid24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.SSID";
        let para_ssid5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.2.SSID";
        let para_key24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.PreSharedKey.1.KeyPassphrase";
        let para_key5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.2.PreSharedKey.1.KeyPassphrase	";
        let para_ppp_user = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Username";
        let para_ppp_pass = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Password";
        let maclan = declare("InternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.1.MACAddress", { value: 1 }).value[0];
        configRoteador(para_ssid24,para_ssid5,para_key24,para_key5,para_ppp_user,para_ppp_pass,maclan)
    }
    }
}
//Condicional para roteador Dlink (Testado apenas em roteadores DIR-841)
else if (fabricante == 'D-LINK') {
    let ppp = declare("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Username", { value: 1 }).value[0];
    if (ppp == default_user_pppoe) {
        clear("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Password", now);
        clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.KeyPassphrase", now);
        clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.KeyPassphrase", now)
        let para_ssid24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.SSID";
        let para_ssid5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.SSID";
        let para_key24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.KeyPassphrase";
        let para_key5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.KeyPassphrase";
        let para_ppp_user = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Username";
        let para_ppp_pass = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Password";
        let maclan = declare("VirtualParameters.MAC", { value: 1 }).value[0];
        configRoteador(para_ssid24,para_ssid5,para_key24,para_key5,para_ppp_user,para_ppp_pass,maclan)
    }
}
//Condicional para roteador MERCUSYS (Testado apenas em roteadores MR30G)
else if (fabricante == 'MERCUSYS') {
    let ppp = declare("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Username", { value: 1 }).value[0];
    if (ppp == default_user_pppoe) {
        clear("InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Password", now);
        clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TP_PreSharedKey", now);
        clear("InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.X_TP_PreSharedKey", now)
        let para_ssid24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.SSID";
        let para_ssid5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.SSID";
        let para_key24 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TP_PreSharedKey";
        let para_key5 = "InternetGatewayDevice.LANDevice.1.WLANConfiguration.3.X_TP_PreSharedKey";
        let para_ppp_user = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Username";
        let para_ppp_pass = "InternetGatewayDevice.WANDevice.1.WANConnectionDevice.1.WANPPPConnection.1.Password";
        let maclan = declare("InternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.1.MACAddress", { value: 1 }).value[0];
        configRoteador(para_ssid24,para_ssid5,para_key24,para_key5,para_ppp_user,para_ppp_pass,maclan)
    }
}

// Função para consultar dados do ERP e seta os parametros no roteador
function configRoteador(para_ssid24,para_ssid5,para_key24,para_key5,para_ppp_user,para_ppp_pass,para_mac_lan){
    let maclan = para_mac_lan;
    let macwan = declare("VirtualParameters.MAC", { value: 1 }).value[0];
    let respmacwan = ext("getMacwan", "getMacwan", macwan.toUpperCase())
    if (respmacwan.status != 404) {
        declare(para_ppp_pass, { value: 1 }, { value: respmacwan.senha });
        declare(para_ppp_user, { value: 1 }, { value: respmacwan.login });
        declare(para_ssid24, { value: 1 }, { value: respmacwan.ssid });
        declare(para_ssid5, { value: 1 }, { value: respmacwan.ssid5g });
        declare(para_key24, { value: 1 }, { value: respmacwan.password });
        declare(para_key5, { value: 1 }, { value: respmacwan.password });
        declare("Tags." + respmacwan.login, null, { value: true });
        declare("VirtualParameters.ppp_username", { path: now, value: now });
        const daily = Date.now(86400000);
        const informInterval = 1500;
      	declare("InternetGatewayDevice.ManagementServer.PeriodicInformInterval", {value: daily}, {value: informInterval});
        commit()
    } else {
        let resplan = ext("getClientes", "getCliente", maclan.toUpperCase());
        declare(para_ssid24, { value: 1 }, { value: resplan.ssid });
        declare(para_ssid5, { value: 1 }, { value: resplan.ssid5g });
        declare(para_key24, { value: 1 }, { value: resplan.password });
        declare(para_key5, { value: 1 }, { value: resplan.password });
        commit()
        declare(para_ppp_pass, { value: 1 }, { value: resplan.ppppass });
        declare(para_ppp_user, { value: 1 }, { value: resplan.ppp });
        declare("Tags." + resplan.ppp, null, { value: true });
        declare("VirtualParameters.ppp_username", { path: now, value: now });
        commit()
    }
}

function configont (para_mac_lan){
    let maclan = para_mac_lan;
    let respmacontstfc = ext("getMacontstfc", "getMacontstfc", maclan.toUpperCase());
    if (respmacontstfc.status != 404) {
        if(respmacontstfc.numero == null){
            let respmacont = ext("getMacont", "getMacont", maclan.toUpperCase())
            log(respmacont.numero)
            let senha = "null"
            if (respmacont.dominio == "vivasim.redepabx.com.br"){
            	senha = "W3X4Ezv6Ae35oJZnP"
            }else if(respmacont.dominio == "flordosertao.redepabx.com.br"){
            	senha = "9T^Z!G*$6pDpE*hjvEAy"
            }else if(respmacont.dominio == "ipamarelo.redepabx.com.br"){
            	senha = "IpAm#2023@tux"
            }
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthUserName", { value: 1 }, { value: respmacont.numero});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthPassword", { value: 1 }, { value: senha});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.OutboundProxy", { value: 1 }, { value: "186.195.15.138"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.OutboundProxyPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.ProxyServer", { value: 1 }, { value: "186.195.15.138"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.ProxyServerPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServer", { value: 1 }, { value: respmacont.dominio});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServerPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryOutboundProxy", { value: 1 }, { value: "186.195.15.138"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryOutboundProxyPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryProxyServer", { value: 1 }, { value: "186.195.15.138"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryProxyServerPort", { value: 1 }, { value: "5060"});
            declare("Tags." + respmacont.numero, null, { value: true });
            commit()
        }else{
            log(respmacontstfc.numero)
            
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthUserName", { value: 1 }, { value: respmacontstfc.numero});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthPassword", { value: 1 }, { value: respmacontstfc.senha});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.OutboundProxy", { value: 1 }, { value: respmacontstfc.dominio});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.OutboundProxyPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.ProxyServer", { value: 1 }, { value: respmacontstfc.dominio});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.ProxyServerPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServer", { value: 1 }, { value: respmacontstfc.dominio});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServerPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryOutboundProxy", { value: 1 }, { value: respmacontstfc.dominio});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryOutboundProxyPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryProxyServer", { value: 1 }, { value: respmacontstfc.dominio});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryProxyServerPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.Enable", { value: 1 }, { value: true});
            declare("Tags." + respmacontstfc.numero, null, { value: true });
            commit()
        }
        
    } else {
        let respmacont = ext("getMacont", "getMacont", maclan.toUpperCase())
        log(respmacont)
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthUserName", { value: 1 }, { value: respmacont.numero});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthPassword", { value: 1 }, { value: respmacont.senha});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.OutboundProxy", { value: 1 }, { value: "186.195.15.138"});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.OutboundProxyPort", { value: 1 }, { value: "5060"});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.ProxyServer", { value: 1 }, { value: "186.195.15.138"});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.ProxyServerPort", { value: 1 }, { value: "5060"});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServer", { value: 1 }, { value: respmacont.dominio});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServerPort", { value: 1 }, { value: "5060"});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryOutboundProxy", { value: 1 }, { value: "186.195.15.138"});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryOutboundProxyPort", { value: 1 }, { value: "5060"});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryProxyServer", { value: 1 }, { value: "186.195.15.138"});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.X_HW_SecondaryProxyServerPort", { value: 1 }, { value: "5060"});
        declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.Enable", { value: 1 }, { value: true});
        declare("Tags." + respmacont.numero, null, { value: true });
        commit()
       
    }
}

function configontzte (para_mac_lan){
    let maclan = para_mac_lan;
    let respmacontstfc = ext("getMacontstfc", "getMacontstfc", maclan.toUpperCase());
    if (respmacontstfc.status != 404) {
        if(respmacontstfc.numero == null){
            let respmacont = ext("getMacont", "getMacont", maclan.toUpperCase())
            log(respmacont.numero)
            let senha = "null"
            if (respmacont.dominio == "vivasim.redepabx.com.br"){
            	senha = "W3X4Ezv6Ae35oJZnP"
            }else if(respmacont.dominio == "flordosertao.redepabx.com.br"){
            	senha = "9T^Z!G*$6pDpE*hjvEAy"
            }else if(respmacont.dominio == "ipamarelo.redepabx.com.br"){
            	senha = "IpAm#2023@tux"
            }
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthUserName", { value: 1 }, { value: respmacont.numero});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.URI", { value: 1 }, { value: respmacont.numero});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthPassword", { value: 1 }, { value: senha});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServer", { value: 1 }, { value: respmacont.dominio});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServerPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Firewall.X_ZTE-COM_ServiceControl.IPV4ServiceControl.1.ServiceType", { value: 1 }, { value: "HTTP,PING"});
            declare("Tags." + respmacont.numero, null, { value: true });
            declare("Tags." + respmacont.dominio, null, { value: true });
            commit()
        }else{
            log(respmacontstfc.numero)
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthUserName", { value: 1 }, { value: respmacontstfc.numero});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.URI", { value: 1 }, { value: respmacontstfc.numero});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthPassword", { value: 1 }, { value: "W3X4Ezv6Ae35oJZnP"});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServer", { value: 1 }, { value: respmacontstfc.dominio});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServerPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Firewall.X_ZTE-COM_ServiceControl.IPV4ServiceControl.1.ServiceType", { value: 1 }, { value: "HTTP,PING"});
            declare("Tags." + respmacontstfc.numero, null, { value: true });
            declare("Tags." + respmacontstfc.dominio, null, { value: true });
            commit()
        }
        
    } else {
        let respmacont = ext("getMacont", "getMacont", maclan.toUpperCase())
        log(respmacont)
            let senha = "null"
            if (respmacont.dominio == "vivasim.redepabx.com.br"){
            	senha = "W3X4Ezv6Ae35oJZnP"
            }else if(respmacont.dominio == "flordosertao.redepabx.com.br"){
            	senha = "9T^Z!G*$6pDpE*hjvEAy"
            }else if(respmacont.dominio == "ipamarelo.redepabx.com.br"){
            	senha = "IpAm#2023@tux"
            }
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthUserName", { value: 1 }, { value: respmacont.numero});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.URI", { value: 1 }, { value: respmacont.numero});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.Line.1.SIP.AuthPassword", { value: 1 }, { value: senha});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServer", { value: 1 }, { value: respmacont.dominio});
            declare("InternetGatewayDevice.Services.VoiceService.1.VoiceProfile.1.SIP.RegistrarServerPort", { value: 1 }, { value: "5060"});
            declare("InternetGatewayDevice.Firewall.X_ZTE-COM_ServiceControl.IPV4ServiceControl.1.ServiceType", { value: 1 }, { value: "HTTP,PING"});
            declare("Tags." + respmacont.numero, null, { value: true });
            declare("Tags." + respmacont.dominio, null, { value: true });
        commit()
       
    }
}
